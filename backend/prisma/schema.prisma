// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model: Represents registered users
model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique @db.VarChar(20)
  password     String        @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
}

// Transaction model: Represents financial transactions (income or expense)
model Transaction {
  id          Int            @id @default(autoincrement())
  amount      Decimal        @db.Decimal(10, 2)
  type        String         @db.VarChar(10)
  description String?        @db.VarChar(255)
  date        DateTime       @db.Date
  userId      Int            //Foreign key to User
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  Int            //Foreign key to Category
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Category model: Represents transaction categories (predefined or user created)
model Category {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(50)
  userId       Int? //Foreign key to User null for predefined categories
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Budget model: Represents monthly budget per category
model Budget {
  id         Int            @id @default(autoincrement())
  amount     Decimal        @db.Decimal(10, 2)
  month      DateTime       @db.Date
  userId     Int            //Foreign key to User
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId Int            //Foreign key to Category
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}
